name: CI/CD Pipeline with Jira Integration

on:
  push:
    branches: [main]
    paths-ignore:
      - 'kubernetes/deployment.yaml'
  pull_request:
    branches: [main]

env:
  JIRA_AUTH: ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}
  JIRA_URL: ${{ secrets.JIRA_BASE_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test
        continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  jiracreation:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      issue_key: ${{ steps.create_jira.outputs.issue_key }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Python dependencies
        run: pip install requests
      - name: Create Jira Ticket
        id: create_jira
        env:
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: python scripts/create_jira_issue.py

  docker:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

  deploy-prod:
  runs-on: ubuntu-latest
  needs: [docker, jiracreation]
  environment:
    name: production
  steps:
    - name: Install dependencies (jq + curl)
      run: sudo apt-get update && sudo apt-get install -y jq curl

    - name: Wait for "Approved for Prod" in Jira Comments
      env:
        JIRA_AUTH: ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}
        JIRA_URL: ${{ secrets.JIRA_BASE_URL }}
        ISSUE_KEY: ${{ needs.jiracreation.outputs.issue_key }}
      run: |
        echo "Checking Jira issue $ISSUE_KEY for approval comment..."
        for i in {1..30}; do
          # Fetch all comments on the Jira issue
          COMMENTS=$(curl -s -u "$JIRA_AUTH" \
            -H "Accept: application/json" \
            "$JIRA_URL/rest/api/3/issue/$ISSUE_KEY/comment" \
            | jq -r '.comments[].body')

          # Check if any comment contains "Approved for Prod"
          if echo "$COMMENTS" | grep -q "Approved for Prod"; then
            echo "‚úÖ Found approval in Jira comments!"
            exit 0
          fi

          echo "‚è≥ Approval not found (attempt $i/30). Waiting 30 seconds..."
          if [ "$i" -eq 30 ]; then
            echo "‚ùå Timeout: No approval comment found after 15 minutes."
            exit 1
          fi
          sleep 30
        done

  update-k8s:
    runs-on: ubuntu-latest
    needs: [docker, deploy-prod, jiracreation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
      - run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          NEW_IMAGE="ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
          sed -i "s|image: ghcr.io/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          echo "Updated image to: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      - run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: sha-${{ github.sha }} [skip ci]" || echo "No changes to commit"
          git push
      - name: Comment on Jira
        env:
          ISSUE_KEY: ${{ needs.jiracreation.outputs.issue_key }}
        run: |
          curl -s -u "$JIRA_AUTH" \
            -H "Content-Type: application/json" \
            -X POST \
            --data "{\"body\": \"üöÄ Commit \`${{ github.sha }}\` successfully deployed to production.\"}" \
            "$JIRA_URL/rest/api/3/issue/${ISSUE_KEY}/comment"
      - name: Transition Jira Issue to Done
        env:
          ISSUE_KEY: ${{ needs.jiracreation.outputs.issue_key }}
        run: |
          TRANSITIONS=$(curl -s -u "$JIRA_AUTH" \
            -H "Accept: application/json" \
            "$JIRA_URL/rest/api/3/issue/${ISSUE_KEY}/transitions")
          TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[] | select(.name=="Done") | .id')
          if [ -z "$TRANSITION_ID" ]; then
            echo "‚ùå Transition 'Done' not found"
            exit 1
          fi
          curl -s -u "$JIRA_AUTH" \
            -H "Content-Type: application/json" \
            -X POST \
            --data "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}" \
            "$JIRA_URL/rest/api/3/issue/${ISSUE_KEY}/transitions"
          echo "‚úÖ Transitioned $ISSUE_KEY to Done"