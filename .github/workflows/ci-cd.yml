name: CI/CD Pipeline with Jira Integration

on:
  push:
    branches: [main]
    paths-ignore:
      - 'kubernetes/deployment.yaml'
  pull_request:
    branches: [main]

env:
  JIRA_AUTH: ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}
  JIRA_URL: ${{ secrets.JIRA_BASE_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test || echo "No tests found"

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  jiracreation:
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      issue_key: ${{ steps.create_jira.outputs.issue_key }}
    steps:
      - name: Create Jira Ticket
        id: create_jira
        run: |
          SUMMARY="Deployment triggered from commit ${{ github.sha }}"
          DESCRIPTION="CI/CD pipeline triggered for commit: ${{ github.sha }}"

          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -u "$JIRA_AUTH" \
            -H "Content-Type: application/json" \
            -X POST \
            --data "{
              \"fields\": {
                \"project\": { \"key\": \"ACT\" },
                \"summary\": \"$SUMMARY\",
                \"description\": \"$DESCRIPTION\",
                \"issuetype\": { \"name\": \"Task\" }
              }
            }" "$JIRA_URL/rest/api/3/issue")

          HTTP_BODY=$(echo "$RESPONSE" | sed -n '/^HTTP_STATUS:/!p')
          HTTP_STATUS=$(echo "$RESPONSE" | grep HTTP_STATUS | cut -d':' -f2)

          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body: $HTTP_BODY"

          if [[ "$HTTP_STATUS" -ne 201 ]]; then
            echo "‚ùå Jira issue creation failed"
            exit 1
          fi

          ISSUE_KEY=$(echo "$HTTP_BODY" | jq -r '.key')
          echo "issue_key=$ISSUE_KEY" >> $GITHUB_OUTPUT

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [docker, jiracreation]
    environment:
      name: production
    steps:
      - name: Wait for Jira Approval
        run: |
          ISSUE_KEY="${{ needs.jiracreation.outputs.issue_key }}"
          echo "Waiting for Jira issue: $ISSUE_KEY to be Approved for Prod"
          for i in {1..30}; do
            STATUS=$(curl -s -u "$JIRA_AUTH" \
              -H "Accept: application/json" \
              "$JIRA_URL/rest/api/3/issue/$ISSUE_KEY" \
              | jq -r '.fields.status.name')

            echo "Current Jira Status: $STATUS"
            if [ "$STATUS" == "Approved for Prod" ]; then
              echo "‚úÖ Approved!"
              break
            fi
            if [ "$i" -eq 30 ]; then
              echo "‚ùå Approval timeout"
              exit 1
            fi
            sleep 30
          done

  update-k8s:
    runs-on: ubuntu-latest
    needs: [docker, deploy-prod, jiracreation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
      - run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          NEW_IMAGE="ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
          sed -i "s|image: ghcr.io/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          echo "Updated image to: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      - run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: sha-${{ github.sha }} [skip ci]" || echo "No changes to commit"
          git push
      - name: Comment on Jira
        run: |
          ISSUE_KEY="${{ needs.jiracreation.outputs.issue_key }}"
          curl -s -u "$JIRA_AUTH" \
            -H "Content-Type: application/json" \
            -X POST \
            --data "{\"body\": \"üöÄ Commit \`${{ github.sha }}\` successfully deployed to production.\"}" \
            "$JIRA_URL/rest/api/3/issue/${ISSUE_KEY}/comment"
      - name: Transition Jira Issue to Done
        run: |
          ISSUE_KEY="${{ needs.jiracreation.outputs.issue_key }}"
          TRANSITIONS=$(curl -s -u "$JIRA_AUTH" \
            -H "Accept: application/json" \
            "$JIRA_URL/rest/api/3/issue/${ISSUE_KEY}/transitions")
          TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[] | select(.name=="Done") | .id')
          if [ -z "$TRANSITION_ID" ]; then
            echo "‚ùå Transition 'Done' not found"
            exit 1
          fi
          curl -s -u "$JIRA_AUTH" \
            -H "Content-Type: application/json" \
            -X POST \
            --data "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}" \
            "$JIRA_URL/rest/api/3/issue/${ISSUE_KEY}/transitions"
          echo "‚úÖ Transitioned $ISSUE_KEY to Done"